<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="search32" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\search32.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="arrowRightAllSimpleBlack16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\arrowRightAllSimpleBlack16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="arrowRightSimpleBlack16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\arrowRightSimpleBlack16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="amlStudio32black" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\amlStudio32black.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="InnovatorAdmin" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\InnovatorAdmin.ico;System.Drawing.Icon, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="innPkg32" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\innPkg32.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Xslt_DocumentMergeImport" xml:space="preserve">
    <value>&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:arasx="http://www.aras.com/XsltExtensions/1.0" xmlns:msxsl="urn:schemas-microsoft-com:xslt" extension-element-prefixes="arasx msxsl"&gt;
  &lt;xsl:output method="xml" omit-xml-declaration="yes" standalone="yes" indent="yes"&gt;&lt;/xsl:output&gt;

  &lt;xsl:template match="table"&gt;
    &lt;xsl:variable name="unique-files" select="arasx:GetUniqueFiles(row/path)" /&gt;
  
    &lt;xsl:variable name="file-query"&gt;
      &lt;Item type="File" action="get" select="id,checksum,file_size"&gt;
        &lt;xsl:attribute name="where"&gt;
          &lt;xsl:for-each select="$unique-files/Result/Item"&gt;
            &lt;xsl:if test="position() != 1"&gt; OR &lt;/xsl:if&gt;
            &lt;xsl:text&gt;([File].[checksum] = '&lt;/xsl:text&gt;
            &lt;xsl:value-of select="checksum" /&gt;
            &lt;xsl:text&gt;' AND [File].[file_size] = &lt;/xsl:text&gt;
            &lt;xsl:value-of select="size" /&gt;
            &lt;xsl:text&gt;)&lt;/xsl:text&gt;
          &lt;/xsl:for-each&gt;
        &lt;/xsl:attribute&gt;
      &lt;/Item&gt;
    &lt;/xsl:variable&gt;
    
    &lt;xsl:variable name="existing-files" select="arasx:CallAction('ApplyItem',$file-query)//*[Item][1]" /&gt;
    
    &lt;xsl:variable name="unique-existing-files"&gt;
      &lt;Result&gt;
        &lt;xsl:for-each select="$unique-files/Result/Item"&gt;
          &lt;xsl:variable name="existing-file" select="$existing-files/Item[checksum = current()/checksum and file_size = current()/size][1]" /&gt;
          &lt;xsl:choose&gt;
            &lt;!-- use the existing file --&gt;
            &lt;xsl:when test="$existing-file"&gt;
              &lt;Item action="get"&gt;
                &lt;xsl:copy-of select="$existing-file/@*" /&gt;
                &lt;xsl:copy-of select="paths" /&gt;
              &lt;/Item&gt;
            &lt;/xsl:when&gt;
            &lt;!-- Upload potential new duplicates to prevent possible race conditions later --&gt;
            &lt;xsl:when test="count(paths/path) &gt; 1"&gt;
              &lt;xsl:variable name="new-query"&gt;
                &lt;Item type="File" action="add" id="{@id}"&gt;
                  &lt;actual_filename&gt;&lt;xsl:value-of select="paths/path[1]" /&gt;&lt;/actual_filename&gt;
                &lt;/Item&gt;
              &lt;/xsl:variable&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="arasx:IsArasFault(arasx:CallAction('ApplyItem',$file-query))"&gt;
                  &lt;Item action="add"&gt;
                    &lt;xsl:copy-of select="@*" /&gt;
                    &lt;xsl:copy-of select="node()" /&gt;
                  &lt;/Item&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;Item action="get"&gt;
                    &lt;xsl:copy-of select="@*" /&gt;
                    &lt;xsl:copy-of select="paths" /&gt;
                  &lt;/Item&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;!-- Add the file later --&gt;
            &lt;xsl:otherwise&gt;
              &lt;Item action="add"&gt;
                &lt;xsl:copy-of select="@*" /&gt;
                &lt;xsl:copy-of select="node()" /&gt;
              &lt;/Item&gt;
            &lt;/xsl:otherwise&gt;
          &lt;/xsl:choose&gt;
        &lt;/xsl:for-each&gt;
      &lt;/Result&gt;
    &lt;/xsl:variable&gt;
    
    &lt;xsl:variable name="document-query"&gt;
      &lt;Item type="Document File" 
            action="get" 
            select="source_id(id),related_id(id)" 
            where="1 = (select count(*) from innovator.DOCUMENT_FILE i where i.SOURCE_ID = [Document_File].SOURCE_ID) and 1 = (select count(*) from innovator.DOCUMENT_FILE i where i.RELATED_ID = [Document_File].RELATED_ID)"&gt;
        &lt;related_id condition="in"&gt;
          &lt;xsl:for-each select="$existing-files/Item"&gt;
            &lt;xsl:if test="position() != 1"&gt;,&lt;/xsl:if&gt;
            &lt;xsl:text&gt;'&lt;/xsl:text&gt;
            &lt;xsl:value-of select="@id"/&gt;
            &lt;xsl:text&gt;'&lt;/xsl:text&gt;
          &lt;/xsl:for-each&gt;
        &lt;/related_id&gt;
      &lt;/Item&gt;
    &lt;/xsl:variable&gt;
    
    &lt;xsl:variable name="existing-docs" select="arasx:CallAction('ApplyItem',$document-query)//*[Item][1]" /&gt;
    
    &lt;Result&gt;
      &lt;xsl:for-each select="row"&gt;
        &lt;xsl:call-template name="RenderAml"&gt;
          &lt;xsl:with-param name="row" select="." /&gt;
          &lt;xsl:with-param name="existing-file" select="msxsl:node-set($unique-existing-files)/Result/Item[paths/path = current()/path]" /&gt;
          &lt;xsl:with-param name="existing-docs" select="$existing-docs" /&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:for-each&gt;
    &lt;/Result&gt;
    
  &lt;/xsl:template&gt;
  
  &lt;xsl:template name="RenderAml"&gt;
    &lt;xsl:param name="row" /&gt;
    &lt;xsl:param name="existing-file" /&gt;
    &lt;xsl:param name="existing-docs" /&gt;
        
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$existing-file/@action = 'get'"&gt;
        &lt;xsl:variable name="existing-doc" select="$existing-docs/Item[related_id/Item/@id = $existing-file/@id]/source_id/Item" /&gt;
        
        &lt;xsl:choose&gt;
          &lt;xsl:when test="$existing-doc"&gt;
            &lt;Item type="Document" action="get" id="{$existing-doc/@id}"&gt;&lt;/Item&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt;
            &lt;Item type="Document" action="add"&gt;
              &lt;Relationships&gt;
                &lt;Item type="Document File" action="add"&gt;
                  &lt;related_id&gt;
                    &lt;xsl:value-of select="$existing-file/@id" /&gt;
                  &lt;/related_id&gt;
                &lt;/Item&gt;
              &lt;/Relationships&gt;
            &lt;/Item&gt;
          &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;Item type="Document" action="add"&gt;
          &lt;Relationships&gt;
            &lt;Item type="Document File" action="add"&gt;
              &lt;related_id&gt;
                &lt;Item type="File" action="add" id="{$existing-file/@id}"&gt;
                &lt;/Item&gt;
              &lt;/related_id&gt;
            &lt;/Item&gt;
          &lt;/Relationships&gt;
        &lt;/Item&gt;
      &lt;/xsl:otherwise&gt;          
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</value>
  </data>
  <data name="install32" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\install32.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Xslt_FileMergeImport" xml:space="preserve">
    <value>&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:arasx="http://www.aras.com/XsltExtensions/1.0" xmlns:msxsl="urn:schemas-microsoft-com:xslt" extension-element-prefixes="arasx msxsl"&gt;
  &lt;xsl:output method="xml" omit-xml-declaration="yes" standalone="yes" indent="yes"&gt;&lt;/xsl:output&gt;

  &lt;xsl:template match="table"&gt;
    &lt;xsl:variable name="unique-files" select="arasx:GetUniqueFiles(row/path)" /&gt;
  
    &lt;xsl:variable name="file-query"&gt;
      &lt;Item type="File" action="get" select="id,checksum,file_size"&gt;
        &lt;xsl:attribute name="where"&gt;
          &lt;xsl:for-each select="$unique-files/Result/Item"&gt;
            &lt;xsl:if test="position() != 1"&gt; OR &lt;/xsl:if&gt;
            &lt;xsl:text&gt;([File].[checksum] = '&lt;/xsl:text&gt;
            &lt;xsl:value-of select="checksum" /&gt;
            &lt;xsl:text&gt;' AND [File].[file_size] = &lt;/xsl:text&gt;
            &lt;xsl:value-of select="size" /&gt;
            &lt;xsl:text&gt;)&lt;/xsl:text&gt;
          &lt;/xsl:for-each&gt;
        &lt;/xsl:attribute&gt;
      &lt;/Item&gt;
    &lt;/xsl:variable&gt;
    
    &lt;xsl:variable name="existing-files" select="arasx:CallAction('ApplyItem',$file-query)//*[Item][1]" /&gt;
    
    &lt;xsl:variable name="unique-existing-files"&gt;
      &lt;Result&gt;
        &lt;xsl:for-each select="$unique-files/Result/Item"&gt;
          &lt;xsl:variable name="existing-file" select="$existing-files/Item[checksum = current()/checksum and file_size = current()/size][1]" /&gt;
          &lt;xsl:choose&gt;
            &lt;!-- use the existing file --&gt;
            &lt;xsl:when test="$existing-file"&gt;
              &lt;Item action="get"&gt;
                &lt;xsl:copy-of select="$existing-file/@*" /&gt;
                &lt;xsl:copy-of select="paths" /&gt;
              &lt;/Item&gt;
            &lt;/xsl:when&gt;
            &lt;!-- Upload potential new duplicates to prevent possible race conditions later --&gt;
            &lt;xsl:when test="count(paths/path) &gt; 1"&gt;
              &lt;xsl:variable name="new-query"&gt;
                &lt;Item type="File" action="add" id="{@id}"&gt;
                  &lt;actual_filename&gt;&lt;xsl:value-of select="paths/path[1]" /&gt;&lt;/actual_filename&gt;
                &lt;/Item&gt;
              &lt;/xsl:variable&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="arasx:IsArasFault(arasx:CallAction('ApplyItem',$file-query))"&gt;
                  &lt;Item action="add"&gt;
                    &lt;xsl:copy-of select="@*" /&gt;
                    &lt;xsl:copy-of select="node()" /&gt;
                  &lt;/Item&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;Item action="get"&gt;
                    &lt;xsl:copy-of select="@*" /&gt;
                    &lt;xsl:copy-of select="paths" /&gt;
                  &lt;/Item&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;!-- Add the file later --&gt;
            &lt;xsl:otherwise&gt;
              &lt;Item action="add"&gt;
                &lt;xsl:copy-of select="@*" /&gt;
                &lt;xsl:copy-of select="node()" /&gt;
              &lt;/Item&gt;
            &lt;/xsl:otherwise&gt;
          &lt;/xsl:choose&gt;
        &lt;/xsl:for-each&gt;
      &lt;/Result&gt;
    &lt;/xsl:variable&gt;
    
    &lt;Result&gt;
      &lt;xsl:for-each select="row"&gt;
        &lt;xsl:call-template name="RenderAml"&gt;
          &lt;xsl:with-param name="row" select="." /&gt;
          &lt;xsl:with-param name="existing-file" select="msxsl:node-set($unique-existing-files)/Result/Item[paths/path = current()/path]" /&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:for-each&gt;
    &lt;/Result&gt;
    
  &lt;/xsl:template&gt;
  
  &lt;xsl:template name="RenderAml"&gt;
    &lt;xsl:param name="row" /&gt;
    &lt;xsl:param name="existing-file" /&gt;
        
    &lt;xsl:choose&gt;
      &lt;xsl:when test="$existing-file/@action = 'get'"&gt;
        &lt;Item type="File" action="get" id="{$existing-file/@id}" /&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;Item type="File" action="add" id="{$existing-file/@id}"&gt;
        &lt;/Item&gt;
      &lt;/xsl:otherwise&gt;          
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</value>
  </data>
  <data name="copy16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\copy16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="arrowLeftSimpleBlack16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\arrowLeftSimpleBlack16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="folder32" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\folder32.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="amlStudio32" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\amlStudio32.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Aml_PackageElements" xml:space="preserve">
    <value>&lt;AML&gt;&lt;Item type="PackageElement" action="get" select="element_id,element_type,name" orderBy="element_type,name,element_id"&gt;
  &lt;source_id condition="in"&gt;(select id
from innovator.PACKAGEGROUP
where SOURCE_ID = '{0}')&lt;/source_id&gt;
&lt;/Item&gt;&lt;/AML&gt;</value>
  </data>
  <data name="up16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\up16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="down16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\down16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Xslt_BaseImport" xml:space="preserve">
    <value>&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:arasx="http://www.aras.com/XsltExtensions/1.0" xmlns:msxsl="urn:schemas-microsoft-com:xslt" extension-element-prefixes="arasx msxsl"&gt;
  &lt;xsl:output method="xml" omit-xml-declaration="yes" standalone="yes" indent="yes"&gt;&lt;/xsl:output&gt;

  &lt;xsl:template match="table"&gt;
    &lt;Result&gt;
      &lt;xsl:for-each select="row"&gt;
        
      &lt;/xsl:for-each&gt;
    &lt;/Result&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</value>
  </data>
  <data name="arrowLeftAllSimpleBlack16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\arrowLeftAllSimpleBlack16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="connectionEditor16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\connectionEditor16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="remove16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\remove16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="manifestFolder32" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\manifestFolder32.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="packageDefinition" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\packageDefinition.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="add16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\add16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="check32" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\check32.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="login16" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\login16.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="function14" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\function14.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SoapSchema" xml:space="preserve">
    <value>&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://schemas.xmlsoap.org/soap/envelope/" targetNamespace="http://schemas.xmlsoap.org/soap/envelope/"&gt;
  &lt;!--  Envelope, header and body  --&gt;
  &lt;xs:import namespace="{0}"/&gt;
  &lt;xs:element name="Envelope" type="tns:Envelope"/&gt;
  &lt;xs:complexType name="Envelope"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="tns:Header" minOccurs="0"/&gt;
      &lt;xs:element ref="tns:Body" minOccurs="1"/&gt;
      &lt;xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:anyAttribute namespace="##other" processContents="lax"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="Header" type="tns:Header"/&gt;
  &lt;xs:complexType name="Header"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:anyAttribute namespace="##other" processContents="lax"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="Body" type="tns:Body"/&gt;
  &lt;xs:complexType name="Body"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:any namespace="{0}" minOccurs="0" maxOccurs="1" processContents="lax"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:anyAttribute namespace="##any" processContents="lax"&gt;
      &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
Prose in the spec does not specify that attributes are allowed on the Body element
        &lt;/xs:documentation&gt;
      &lt;/xs:annotation&gt;
    &lt;/xs:anyAttribute&gt;
  &lt;/xs:complexType&gt;
  &lt;!--
 Global Attributes.  The following attributes are intended to be usable via qualified attribute names on any complex type referencing them.  
--&gt;
  &lt;xs:attribute name="mustUnderstand"&gt;
    &lt;xs:simpleType&gt;
      &lt;xs:restriction base="xs:boolean"&gt;
        &lt;xs:pattern value="0|1"/&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
  &lt;/xs:attribute&gt;
  &lt;xs:attribute name="actor" type="xs:anyURI"/&gt;
  &lt;xs:simpleType name="encodingStyle"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
'encodingStyle' indicates any canonicalization conventions followed in the contents of the containing element. For example, the value 'http://schemas.xmlsoap.org/soap/encoding/' indicates the pattern described in SOAP specification
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:list itemType="xs:anyURI"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:attribute name="encodingStyle" type="tns:encodingStyle"/&gt;
  &lt;xs:attributeGroup name="encodingStyle"&gt;
    &lt;xs:attribute ref="tns:encodingStyle"/&gt;
  &lt;/xs:attributeGroup&gt;
  &lt;xs:element name="Fault" type="tns:Fault"/&gt;
  &lt;xs:complexType name="Fault" final="extension"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;Fault reporting structure&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="faultcode" type="xs:QName"/&gt;
      &lt;xs:element name="faultstring" type="xs:string"/&gt;
      &lt;xs:element name="faultactor" type="xs:anyURI" minOccurs="0"/&gt;
      &lt;xs:element name="detail" type="tns:detail" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="detail"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded" processContents="lax"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:anyAttribute namespace="##any" processContents="lax"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</value>
  </data>
  <data name="logo_black" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\logo-black.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="logo_white" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\logo-white.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="logo_black_opaque" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\icons\logo-black-opaque.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>